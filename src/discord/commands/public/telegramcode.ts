import { createCommand } from '#base'
import { TelegramService } from '#services'
import {
  ApplicationCommandOptionType,
  ApplicationCommandType,
  Colors,
  EmbedBuilder,
} from 'discord.js'

createCommand({
  name: 'telegramcode',
  description: 'Insere o c√≥digo SMS do Telegram para autentica√ß√£o',
  descriptionLocalizations: {
    'en-US': 'Insert Telegram SMS code for authentication',
    'pt-BR': 'Insere o c√≥digo SMS do Telegram para autentica√ß√£o',
  },
  type: ApplicationCommandType.ChatInput,
  options: [
    {
      name: 'codigo',
      description: 'C√≥digo SMS de 5 d√≠gitos recebido do Telegram',
      descriptionLocalizations: {
        'en-US': '5-digit SMS code received from Telegram',
        'pt-BR': 'C√≥digo SMS de 5 d√≠gitos recebido do Telegram',
      },
      type: ApplicationCommandOptionType.String,
      required: true,
    },
  ],
  async run(interaction) {
    await interaction.deferReply({ ephemeral: true })

    try {
      const code = interaction.options.getString('codigo', true)

      // Valida√ß√£o b√°sica do c√≥digo
      if (!/^\d{5}$/.test(code)) {
        const embed = new EmbedBuilder()
          .setColor(Colors.Red)
          .setTitle('‚ùå C√≥digo Inv√°lido')
          .setDescription('O c√≥digo SMS deve ter exatamente 5 d√≠gitos num√©ricos.')
          .addFields({
            name: 'üì± Formato esperado',
            value: 'Exemplo: `12345`',
            inline: false,
          })
          .setFooter({ text: 'Verifique o c√≥digo recebido no seu celular' })

        await interaction.editReply({ embeds: [embed] })
        return
      }

      // Verifica se h√° autentica√ß√£o pendente
      if (!TelegramService.hasPendingAuth()) {
        const embed = new EmbedBuilder()
          .setColor(Colors.Orange)
          .setTitle('‚ö†Ô∏è Nenhuma Autentica√ß√£o Pendente')
          .setDescription('N√£o h√° processo de autentica√ß√£o aguardando c√≥digo SMS.')
          .addFields({
            name: 'üîÑ Como usar',
            value:
              '1. Execute `/promocoes` primeiro\n2. Aguarde a mensagem "SMS code required!"\n3. Use este comando com o c√≥digo recebido',
            inline: false,
          })

        await interaction.editReply({ embeds: [embed] })
        return
      }

      // Envia o c√≥digo
      const success = TelegramService.submitSMSCode(code)

      if (success) {
        const embed = new EmbedBuilder()
          .setColor(Colors.Green)
          .setTitle('‚úÖ C√≥digo Enviado')
          .setDescription('O c√≥digo SMS foi enviado com sucesso!')
          .addFields({
            name: 'üì± Pr√≥ximos passos',
            value:
              'Aguarde alguns segundos para a autentica√ß√£o ser processada.\nVoc√™ pode executar `/promocoes` novamente.',
            inline: false,
          })
          .setTimestamp()

        await interaction.editReply({ embeds: [embed] })
      } else {
        const embed = new EmbedBuilder()
          .setColor(Colors.Red)
          .setTitle('‚ùå Erro ao Enviar C√≥digo')
          .setDescription('N√£o foi poss√≠vel processar o c√≥digo SMS.')
          .addFields({
            name: 'üîÑ Tente novamente',
            value:
              'Verifique se o c√≥digo est√° correto e tente novamente.\nSe o problema persistir, execute `/promocoes` para reiniciar o processo.',
            inline: false,
          })

        await interaction.editReply({ embeds: [embed] })
      }
    } catch (error) {
      console.error('Error in telegram-code command:', error)

      const embed = new EmbedBuilder()
        .setColor(Colors.Red)
        .setTitle('‚ùå Erro Interno')
        .setDescription('Ocorreu um erro ao processar o c√≥digo.')
        .addFields({
          name: 'üêõ Detalhes',
          value: error instanceof Error ? error.message : 'Erro desconhecido',
          inline: false,
        })

      await interaction.editReply({ embeds: [embed] })
    }
  },
})
